@@@@@@@@@@@@@
DAY- 1
@@@@@@@@@@@@@

DevOps ????


Software

SDLC ????

Waterfall Model :::   === Linear in fashion!!!!

	Requirement Analysis
	Design
	Code
	Test
	Implementation / Deployment
	Enha...
	
Agile Methodologies!!!!   ---=== 

Iteration1
	Requirement Analysis
	Design
	Code
	Test
	Implementation / Deployment
	Enha..
	
Iteration2
	Requirement Analysis
	Design
	Code
	Test
	Implementation / Deployment
	Enha..
	
Iteration3
	Requirement Analysis
	Design
	Code
	Test
	Implementation / Deployment
	Enha..
	
	
	

DevOps !!!!

Online - -E-Commerce 

Amazon.com 

Functions / Services :::

sign-up
Login
search for the products
check the reviews
add the product to cart
make payments			===> do some minor changes & rel.
place the order 
track the order


Micro-service based appln.

Monolith Appln.

Environments :::

Development Environments
Build Environments
Test Environments
Production Environments

Non-Production Environment								Production Environment

DEV,QA,UAT,Pre-Prod/Staging 			<==>			PROD - Environment


Using DevOps We are actually gng to automate these process.

DEV Environment Create the the source code, Java Application ===>
Build ===>> is a process of compiling the source code and creating the artifacts(binaries)*.war
Java Application ===>

The same artifacts will be promoted to higher envi. (QA/UAT/Pre-Prod/Staging) PROD.

Continous Deployment ::: 
Continous Integration ::: ===>> Build ===>> is a process of compiling the source code and creating the artifacts(binaries)*.war

Continous Delivery :::  Automatically deploy the artifacts in all the (DEV,QA,UAT,Pre-Prod/Staging) 
						but, to deploy to a prod envi you need Manual approval process.

Continuous Deployment ::: Automatically deploy the artifacts in all the (DEV,QA,UAT,Pre-Prod/Staging)  and also in Production.


DevOps Strategies you define!!!!  Continous Improvement.......


ALM -- Application Lifecycle Management Tool  - jira, 

IDE -- Integrated Development Environment - Eclipse based IDE, Visual Studio Code... 


build 

release 

Jenkins Pipeline::: === Build orchestrator!!!

git, build(maven) and create articate,  test junit, docker/k8s/ansible monitor

SDLC == DevOps 

Code Deployment/Delivery/Promotion/Release ::::

Summary ::

What is DevOps ?
What are the various Stages in DevOps?
How DevOps is far better that Agile/Waterfall ?
List of DevOps Tools and its purpose on High-level.


jdk === jdk1.7
jdk1.8


AWS Console!!!!

for all our Lab practise!!

VM's 

First, create AWS Account -- Free Tier Account == valid for 1 year.
Create Virtual Machines!!! 

@@@@@@@@@@@@@
DAY- 2
@@@@@@@@@@@@@

Dev Environment :::  IDE --- Eclipse based IDEs - Visual Studio code.

save...

flat file --- *.java 

java web appln.  ===> index.jsp....

index.jsp 
		with a func1.
		tested.
		saved.   ===> v1.0

index.jsp 
		with a func2.
		tested.
		saved.	===> v1.2

index.jsp 
		with a func3.
		tested.
		saved.  ===> v1.3
		
		
Version control system   == Commit 

	-- used to version control the files which I save.
	-- Which can track my file changes.
	
jdk-v1.8
jdk-v1.7


index.jsp 

	rec1
	rec2 
	
	saved ===> v1.0
	
index.jsp 

	rec1
	rec2 
	rec3
	rec4 
	saved ===> v1.1
	
	saved ===> v1.1
	
Remote Repo.::

	Local Repo 
	
	Staging Area
	
	Working Dir.
	


git clone   ==>> 

git add .

git commit

git fetch

git pull

git push 

git fetch ::: --- update the local repo. 
git merge 

git pull ::: -- it will update the local repo as well as working dir.  ===> fetch & merge 








github.com as a remote repository!!!!

Create an account in www.github.com
email -- 

Create a remote repository in github.


gitlab
az repo
aws code commit
bitbucket



Next Will see how to create aws account!!!

Create VMs'



Next :::

How to Install GIT ????

Windows ::
			GIT BASH   == Command User Interface
		****GIT GUI    == GUI 
	
Linux VMs -- AWS Linux 2.


Summary:::

Basic of VCS / GIT
Create github account
create github repo
fork github repo
install git on both windows and Linux
Login to AWS Console
Create Amazon Linux 2 Machine 
Connect using EC2 Instance Connect!!!!



@@@@@@@@@@@

DAY-3

@@@@@@@@@@@

GIT Commands 

	Local Repo..
	Branches
	Remote Repos...


GIT Lab :::


GIT Bash == demo all git commands.


AWS Linux 


Tracking the changes::::

v1.0

who has made the changes and when the changes happened???


user identity is mandatory!!!

Create the valid user and email id. 
commit..

git config --list

git config --global 

git init -- is used to initialize a local repo -- with default master branch

git add , commit

Developer ... 

DEvOps === find a scope for automation!!!! 
		creating the scripts == shell script/python/groovy/yaml
		
		
Consider!!!

Devops Engg. work on an automation == python script... 



Repo1 (branch1)
	aws_infra_provision.py	
	git add .
	
Repo1 (branch2)
	aws_infra_provision1.py
	

git stash  - #temp_area!

Branch ==> is used to work of the changes independently without impacting other branches.

git status & log 


files are there in staging area!!!


remove the file from staging Area...

git rm --cached file1.txt  === removed from staging area, but it exist in working dir.

git rm -f file1.txt  === removed from staging area as well as from working dir.
	
	
git ignore!!!

Consider ::: 

java developer 
repo1
	*.java   == Source code to be tracked.. 
	*.jsp    == Source code to be tracked.. 
	*.class 
	*.war
	*.jar
	folder/
	config
	secret
	envi.variable_files

folder/
	99 files 	
1.doc 

1 


git commit == > local repo 
git push == > push to remote repo.. 


Summary:::

create local git repo ::
git init
.gitignore 
git config 
git add 
git commit 
git log 
git stash 
status,


file1.txt  in WDir
file2.txt
file3.doc 


git push 


add to index area 
commit to git repo.


GIT === is not just about commands


strategy we create and follow....

@@@@@@@@
DAY-4
@@@@@@@@

Local Gite Repo.;::git add commit...

git diff ===>

DevOps era!!!

git diff 

git revert =====>>>>

I did some prod .deployment (deployment window) 

revert 
reset !!!

git reset!!!

git add vs commit

git reset --soft   ===> jus changes my HEAD ptr to prev. commit it won't remove the file from index 
git reset --mixed  ===> changes my HEAD ptr to prev. commit and also remove the file from staging area
git reset --hard   ===> changes my HEAD ptr to prev. commit and also remove the file from staging area as well as from W.Dir


git repo... 

  603  git log --oneline
  604  ls
  605  git ls-files
  606  git reset --hard 756cbbd
  607  git log --oneline
  608  git status
  609  ls
  610  git ls-files

cm3  === 15
cm2  === 10


cm1  === 05


git reset vs revert!!!!

Consider !!! 

committed some changes ///

cm1,2,3,4, 

git commit -m "CADSF"

git commit --amend -m "ADF"


developer === >> 10 files 


9 files 

git add .  # added only 9 files
git commit -m "CR1001"


git rm 



commit msg == release ID / CR # 




1,2,3,4,5,6   working files 



commit all the 6 files together.


committed 5 files intead of 6. 

git add file6
git commit --amend --no-edit 











Branches!!! 
Repo1 
master / main == is default branch! -== Prod copy of my src.

create a new branch and work on it.


Branching techniques...


Branching Strategies :::

master -- prod copy (file1.txt,file2.txt,file3.txt)

	Developer 1 : feature_branch1 (file1.txt,file2.txt,file3.txt)
	Developer 1 : feature_branch2 (file1.txt,file2.txt,file3.txt)
	Developer 1 : feature_branch3 (file1.txt,file2.txt,file3.txt)
	Developer 1 : feature_branch4 (file1.txt,file2.txt,file3.txt)
	Developer 1 : feature_branch5 (file1.txt,file2.txt,file3.txt)


********************************************************************

master ===

	Development_Branch
		Developer 1 : feature_branch1 (file1.txt,file2.txt,file3.txt)
		Developer 2 : feature_branch2 (file1.txt,file2.txt,file3.txt)
		Developer 3 : feature_branch3 (file1.txt,file2.txt,file3.txt)
		Developer 4 : feature_branch4 (file1.txt,file2.txt,file3.txt)


************************************************************************

master === 

hot-fix / adhoc Branch 

	Release Branch :

		Integration Branch:
		
			Development_Branch			# Appln. Team1
				Developer 1 : feature_branch1 (file1.txt,file2.txt,file3.txt)
				Developer 2 : feature_branch2 (file1.txt,file2.txt,file3.txt)
				Developer 3 : feature_branch3 (file1.txt,file2.txt,file3.txt)
				Developer 4 : feature_branch4 (file1.txt,file2.txt,file3.txt)

			Development_Branch			# Appln. Team2
				Developer 1 : feature_branch1 (file1.txt,file2.txt,file3.txt)
				Developer 2 : feature_branch2 (file1.txt,file2.txt,file3.txt)
				Developer 3 : feature_branch3 (file1.txt,file2.txt,file3.txt)
				Developer 4 : feature_branch4 (file1.txt,file2.txt,file3.txt)






QA / UAT == PROD  

tag is used to identify the rel.

jdk1.7

jdk1.8 

git 2.68.1


Merge Conflicts!!!!

Occurs when more than one users try to update the same file / rec...

